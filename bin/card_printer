#!/usr/bin/env ruby

require 'slop'
require 'card_printer'
require 'card_printer/parser'
require 'json'

# stories << CardPrinter::Story.new(name: "Foobar")

# CardPrinter.render(stories, "my_stories.pdf")


class Cli
  attr_reader :opts
  class BadCliOptionError < StandardError; end

  def initialize
    @opts = Slop.parse do |o|
      o.banner = "Usage: #{File.basename(__FILE__)} [options] <output file.pdf>"
      o.separator %{Options:}
      o.on('-p=', 'parser',
        %Q{Choose input parser (one of '#{CardPrinter::Parser.available_parsers.join("', '")}', default: trello_json_export)},
        default: 'trello_json_export'
      )
      o.on('-r=', 'renderer', "Choose layout renderer (one of '#{CardPrinter.available_layouts.join("', '")}', default: '6x4')",
        default: '6x4'
      )
      o.on '-h=', %Q{display this help message}

      o.separator %{
Data input:

Provide story data on standard input in json-lines format (one JSON object per
line).

Each json object represents a story with the following attributes:

  * name (required)
  * description
  * label
  * story_type - feature|bug|chore|other
  * estimate

e.g.

{"name": "First story"}
{"name": "Second story", "description": "Do some things", "label": "epic one", "story_type": "feature", "estimate": "1"}
}
    end
  end

  def run
    if ARGV.size == 1
      stories = CardPrinter::Parser.parse($stdin, opts[:parser])
      CardPrinter.render(stories, ARGV[0], opts[:renderer])
    else
      puts opts
      puts opts['parser']
    end
  end
end

Cli.new.run
